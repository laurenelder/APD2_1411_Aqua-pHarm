package com.laurenelder.aquapharm;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.ActionBar;
import android.app.ActionBar.Tab;
import android.app.ActionBar.TabListener;
import android.app.Activity;
import android.app.Fragment;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.content.Context;
import android.content.Intent;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.format.DateFormat;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.TabHost;
import android.widget.Toast;


public class MainActivity extends Activity implements TabListener, MainFragment.mainInterface, 
	LocationListener {

	String tag = "MAIN ACTIVITY";
	Context context;
	FileManager fileManager;
	FragmentManager fragMgr;
	Fragment mainFrag;
	LocationManager locMgr;
	Location loc;
	boolean switched;
	Double cap;
	URL url = null;
	Integer apiNum = 0;
	String modifiedDate;
	String latit;
	String longit;
	List <Containers> containerList = new ArrayList<Containers>();
	List <Weather> weatherInfo = new ArrayList<Weather>();

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.fragment_main);

		context = this;
		switched = false;

		ActionBar actionBar = getActionBar();
		actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);

		Tab actionBarTab = actionBar.newTab();
		actionBarTab.setText(R.string.actionbar_buildsystem).setTabListener(this);
		actionBar.addTab(actionBarTab);
		actionBarTab = actionBar.newTab();
		actionBarTab.setText(R.string.actionbar_fish).setTabListener(this);
		actionBar.addTab(actionBarTab);
		actionBarTab = actionBar.newTab();
		actionBarTab.setText(R.string.actionbar_plants).setTabListener(this);
		actionBar.addTab(actionBarTab);

		actionBar.setSelectedNavigationItem(0);

		// Setup FragmentManager to call methods in FormFragment
		fragMgr = getFragmentManager();
		mainFrag = (MainFragment)fragMgr.findFragmentById(R.id.mainFrag);
		if(mainFrag == null) {
			mainFrag = new AddContainerFragment();
		}

		// Setup LocationManager for GPS updates
		locMgr = (LocationManager)getSystemService(LOCATION_SERVICE);
		//        locMgr.requestLocationUpdates(LocationManager.GPS_PROVIDER, 5000, 10, this);
		locMgr.requestSingleUpdate(LocationManager.GPS_PROVIDER, this, null);
		loc = locMgr.getLastKnownLocation(LocationManager.GPS_PROVIDER);

		checkForFile();
		
	}


	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);

		//       menu.findItem(R.id.action_about).s
		menu.findItem(R.id.action_item_one).setEnabled(true).setVisible(true);

		menu.findItem(R.id.action_item_one).setIcon(R.drawable.ic_action_new);
		menu.findItem(R.id.action_item_two).setIcon(R.drawable.ic_action_about);

		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_item_one) {
			Intent addIntent = new Intent(context, AddContainerActivity.class);
			startActivityForResult(addIntent, 1);
			return true;
		}
		if (id == R.id.action_item_two) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onTabSelected(Tab tab, FragmentTransaction ft) {
		// TODO Auto-generated method stub
		int tabIndex = tab.getPosition();
		if (tabIndex == 0) {
			switched = true;
		}
		if (tabIndex == 1) {
			//			switched = true;
			if (switched == true) {
				Intent fishIntent = new Intent(context, FishActivity.class);
				startActivity(fishIntent);
			}
		}
		if (tabIndex == 2) {
			if (switched == true) {
				Intent plantsIntent = new Intent(context, PlantsActivity.class);
				startActivity(plantsIntent);
			}
		}
	}

	@Override
	public void onTabUnselected(Tab tab, FragmentTransaction ft) {
		// TODO Auto-generated method stub

	}


	@Override
	public void onTabReselected(Tab tab, FragmentTransaction ft) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onBackPressed() {
		// TODO Auto-generated method stub

	}

	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (resultCode == RESULT_OK) {
			if (requestCode == 1) {
				checkForFile();
			}
			if (requestCode == 2) {
				String ctype = data.getExtras().getString("type").toString();
				String clength = data.getExtras().getString("length").toString();
				String cwidth = data.getExtras().getString("width").toString();
				String cheight = data.getExtras().getString("height").toString();
				String button = data.getExtras().getString("button").toString();
				int position = data.getExtras().getInt("position");

//				Log.i(tag, "requestCode 2 hit");
//				Log.i(tag, containerList.toString());

				if (button.matches("edit")) {
					Intent addIntent = new Intent(context, AddContainerActivity.class);
					addIntent.putExtra("type", ctype);
					addIntent.putExtra("length", clength);
					addIntent.putExtra("width", cwidth);
					addIntent.putExtra("height", cheight);
					addIntent.putExtra("spot", position);
					startActivityForResult(addIntent, 1);
				}
				if (button.matches("delete")) {
					//					Log.i(tag, "Delete Hit" + "-" + spot.toString());

					if (containerList.size() > 1) {
						containerList.remove(position);
						saveData();
					} else {
						containerList.removeAll(containerList);
						File checkForFileExist = getBaseContext().getFileStreamPath(getResources()
								.getString(R.string.container_file_name));
						if (checkForFileExist.exists()) {
							checkForFileExist.delete();
						}
						((MainFragment) mainFrag).clearList();
						((MainFragment) mainFrag).updateListView();
					}
				}
			}
		}
	}

	public void startContainerActivity(int pos) {
		Intent containerIntent = new Intent(context, ContainerActivity.class);
		containerIntent.putExtra("type", containerList.get(pos).type);
		containerIntent.putExtra("length", containerList.get(pos).length);
		containerIntent.putExtra("width", containerList.get(pos).width);
		containerIntent.putExtra("height", containerList.get(pos).height);
		containerIntent.putExtra("position", pos);
		startActivityForResult(containerIntent, 2);
	}

	public void checkForFile() {
		// Check for saved file and parse if file is available
		if (!containerList.isEmpty()) {
			containerList.removeAll(containerList);
			((MainFragment) mainFrag).clearList();
		}
		fileManager = FileManager.getInstance();
		File checkForFile = getBaseContext().getFileStreamPath(getResources()
				.getString(R.string.container_file_name));
		if (checkForFile.exists()) {
			String fileContent = fileManager.readFromFile(context, getResources()
					.getString(R.string.container_file_name), null);
			if (fileContent != null) {
				parseData(fileContent.toString(), "containers");
//				Log.i(tag, fileContent.toString());
			}
		}
	}

	/* parseData is passed in a raw string from saved file, parses, and calls
	 * the setData method
	 */
	public void parseData (String rawData, String parseType) {

		JSONObject mainObject = null;

		try {
			mainObject = new JSONObject(rawData);
//			Log.i(tag, rawData);
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (parseType.matches("containers")) {
			JSONArray subObject = null;
			try {
				if (mainObject != null) {
					subObject = mainObject.getJSONArray("containers");
				}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			for (int i = 0; i < subObject.length(); i++) {

				JSONObject dataObj = null;
				try {
					if (subObject != null) {
						dataObj = subObject.getJSONObject(i);

						String containerType = dataObj.getString("type");
						String containerLength = dataObj.getString("length");
						String containerWidth = dataObj.getString("width");
						String containerHeight = dataObj.getString("height");

/*						Log.i(tag, containerType.toString());
						Log.i(tag, containerLength.toString());
						Log.i(tag, containerWidth.toString());
						Log.i(tag, containerHeight.toString());*/

						setData(containerType, containerLength, containerWidth, containerHeight);
						((MainFragment) mainFrag).addData(containerType, containerLength, containerWidth, containerHeight);
					}
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			((MainFragment) mainFrag).updateListView();
		}
		if (parseType.matches("weather")) {
			JSONObject locationSubObject = null;
			JSONObject historySubObject = null;
			JSONObject historyDateSubObject = null;
			JSONArray observationsSubObject = null;
			JSONObject lowTempSubObject = null;
			JSONObject highTempSubObject = null;
			try {
				if (mainObject != null) {
					
					locationSubObject = mainObject.getJSONObject("location");
					historySubObject = mainObject.getJSONObject("history");
					historyDateSubObject = historySubObject.getJSONObject("date");
					observationsSubObject = historySubObject.getJSONArray("observations");
					lowTempSubObject = observationsSubObject.getJSONObject(0);
					highTempSubObject = observationsSubObject.getJSONObject(27);
					
					String location = locationSubObject.getString("city") + ", " + 
							locationSubObject.getString("state");
					String day = historyDateSubObject.getString("mday");
					String month = historyDateSubObject.getString("mon");
					String year = historyDateSubObject.getString("year");
					String minTemp = lowTempSubObject.getString("tempi");
					String maxTemp = highTempSubObject.getString("tempi");
					setDataWeatherData(location, day, month, year, minTemp, maxTemp);
				}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	/* setData is called at the end of the parseData method and saves each
	 * JSON object to a custom object in the activity
	 */
	public boolean setData (String type, String length, String width, 
			String height) {

		Containers newContainer = new Containers(type, length, width,
				height);
		containerList.add(newContainer);
		return true;
	}
	
	/* setData is called at the end of the parseData method and saves each
	 * JSON object to a custom object in the activity
	 */
	public boolean setDataWeatherData (String thisLocation, String thisDay, String thisMonth, String thisYear, 
			String thisLowTemp, String thisHighTemp) {
		apiNum++;
		Weather weatherData = new Weather(thisLocation, thisDay, thisMonth, thisYear, 
				thisLowTemp, thisHighTemp);
		weatherInfo.add(weatherData);
		if (apiNum < 8) {
			handleAPI(modifiedDate);
		}
		Log.i(tag, weatherInfo.toString());
		return true;
	}

	public Double getTotalCapacity() {
		Double cap = 0.00;
		for (int q = 0; q < containerList.size(); q++) {
			Integer cuInches = Integer.parseInt(containerList.get(q).length) * 
					Integer.parseInt(containerList.get(q).width) * 
					Integer.parseInt(containerList.get(q).height);
			Log.i(tag, cuInches.toString());

			Double cuFoot = cuInches / 1728.00;

			Double gallons = 7.48 * cuFoot;

			cap = cap + gallons;
		}
		return cap;
	}

	public Double getCycleRate(Integer flow) {
		Double cycleRate = cap / flow;
		return cycleRate;
	}

	/* saveData method is called by the action bar button.
	 * This method builds a JSON file from the objects store within custom
	 * objects and calls writeToFile to save the JSON file to the device.
	 */
	public void saveData() {
		String preJson = "{'containers':[";
		String contentJson = null;
		String postJson = "]}";
//		Log.i(tag, "saveData method hit");
		for (int i = 0; i < containerList.size(); i++) {
			if (i == 0) {
				contentJson = "{'type':" + "'" + containerList.get(i).type.toString() + "'" + "," +
						"'length':" + "'" + containerList.get(i).length.toString() + "'" + "," +
						"'width':" + "'" + containerList.get(i).width.toString() + "'" + "," +
						"'height':" + "'" + containerList.get(i).height.toString() + "'" +  "}";
			} else {
				contentJson = contentJson + "{'type':" + "'" + containerList.get(i).type.toString() + "'" + "," +
						"'length':" + "'" + containerList.get(i).length.toString() + "'" + "," +
						"'width':" + "'" + containerList.get(i).length.toString() + "'" + "," +
						"'height':" + "'" + containerList.get(i).height.toString() + "'" + "}";
			}

			if (i != containerList.size() - 1) {
				contentJson = contentJson + ",";
			}	
		}
		String fullJson = preJson + contentJson + postJson;
//		Log.i(tag, fullJson);
		fileManager.writeToFile(context, getResources().getString(R.string.container_file_name), fullJson);
		checkForFile();
	}
	
	// Calls API with correct date and location
	public void handleAPI(String date) {
		if (loc != null) {
			// Check Network Connection and Show Error Notification if false
			if (checkConnection(context) == true) {
				
				getAPIdata data = new getAPIdata();
				String formattedURL = null;
				
				if (apiNum == 0) {
					formattedURL = context.getString(R.string.api_prehistory) + date + 
							context.getString(R.string.api_precoord) + latit + "," + longit +
							context.getString(R.string.api_end);
					Log.i(tag, formattedURL);
					modifiedDate = date;
				} else {
					String subDayStr = modifiedDate.substring(6, 7);
					Integer subDayNum = Integer.parseInt(subDayStr);
					Log.i(tag, "Day: " + subDayStr);
					String subMonStr = modifiedDate.substring(4, 5);
					Integer subMonNum = Integer.parseInt(subMonStr);
					Log.i(tag, "Month: " + subMonStr);
					String subYearStr = modifiedDate.substring(0, 3);
					Integer subyearNum = Integer.parseInt(subYearStr);
					Log.i(tag, "Year: " + subYearStr);
					
					if (apiNum == 1 || apiNum == 3 || apiNum == 5 || 
							apiNum == 7) {
						if (subMonNum <= 2) {
							if (subMonNum == 1) {
								subMonNum = 11;
							}
							if (subMonNum == 2) {
								subMonNum = 12;
							}
							subyearNum = subyearNum - 1;
						} else {
							subMonNum = subMonNum - 2;
						}
						subDayNum = 15;
						
					} else {
						if (subMonNum == 1) {
							subMonNum = 12;
							subyearNum = subyearNum - 1;
						} else {
							subMonNum = subMonNum - 2;
						}
						subDayNum = 01;
					}
					modifiedDate = subyearNum.toString() + subMonNum.toString() + subDayNum.toString();
					Log.i(tag, modifiedDate);
					
					formattedURL = context.getString(R.string.api_prehistory) + subyearNum.toString() + 
							subMonNum.toString() + subDayNum.toString() + 
							context.getString(R.string.api_precoord) + latit + "," + 
							context.getString(R.string.api_end);
				}
				
				try {
					url = new URL(formattedURL);
				} catch (MalformedURLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}	
				
				data.execute(formattedURL);
				
			} else {
				Toast.makeText(context, "No Internet Connection Available", Toast.LENGTH_SHORT).show();
				Log.i(tag, "No Internet Connection");
			}
		}
	}

	// Check Network Connection Method
	public Boolean checkConnection (Context context) {
		Boolean connected = false;
		ConnectivityManager connManag = (ConnectivityManager) context
				.getSystemService
				(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfomation = connManag.getActiveNetworkInfo();
		if (networkInfomation != null) {
			if (networkInfomation.isConnected()) {
				Log.i(tag, "Connection Type: " + networkInfomation.getTypeName()
						.toString());
				connected = true;
			}
		}
		return connected;
	}

	// API Method
	public String getAPIresponse(URL url) {
		String apiResponse = "";
		try {
			URLConnection apiConnection = url.openConnection();
			BufferedInputStream bufferedInput = new BufferedInputStream(apiConnection
					.getInputStream());
			byte[] contextByte = new byte[1024];
			int bytesRead = 0;
			StringBuffer responseBuffer = new StringBuffer();
			while ((bytesRead = bufferedInput.read(contextByte)) != -1) {
				apiResponse = new String(contextByte, 0, bytesRead);
				responseBuffer.append(apiResponse);
			}
			apiResponse = responseBuffer.toString();
			//			Log.i(tag, apiResponse);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			Log.i(tag, "getAPIresponse - no data returned");
			e.printStackTrace();
		}
//		Log.i(tag, apiResponse.toString());
		return apiResponse;
	}

	// API Class
	class getAPIdata extends AsyncTask<String, Void, String> {

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
		}

		@Override
		protected String doInBackground(String... params) {
			// TODO Auto-generated method stub
			String APIresponseStr = "";

			if (url != null) {
				APIresponseStr = getAPIresponse(url);
				return APIresponseStr;
			} else {
				return null;
			}
		}

		@Override
		protected void onPostExecute(String result) {
			//			Log.i(tag, result);
			super.onPostExecute(result);

//			Log.i(tag, result);
			// Parse Methods Called based after API has returned data
			parseData(result, "weather");
		}
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		Log.i(tag, "Latitude: " + location.toString() + ", " + "Longitude: " + location.toString());
		
		// Get current date
		 Date date = new Date();
		 CharSequence currentDate  = DateFormat.format("yyyyMMdd", date.getTime());
		 Log.i(tag, currentDate.toString());
		 
		 latit = String.valueOf(location.getLatitude());
		 longit = String.valueOf(location.getLongitude());
		
		handleAPI(currentDate.toString());
	}


	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void onProviderDisabled(String provider) {
		// TODO Auto-generated method stub
		
	}
}
