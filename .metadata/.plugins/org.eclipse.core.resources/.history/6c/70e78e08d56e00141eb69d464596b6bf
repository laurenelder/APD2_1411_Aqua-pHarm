package com.laurenelder.aquapharm;

import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.ActionBar.Tab;
import android.app.ActionBar.TabListener;
import android.app.ActionBar;
import android.app.Activity;
import android.app.FragmentTransaction;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;

public class PlantsActivity extends Activity implements TabListener, PlantsFragment.OnSelected {
	
	Context context;
	String tag = "PlantsActivity";
	FileManager fileManager;
	boolean switched;
	String fileName;
	List<Plants> plantsList = new ArrayList<Plants>();
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.fragment_plants);
		
		context = this;
		switched = false;
		
        ActionBar actionBar = getActionBar();
        actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
        
        Tab actionBarTab = actionBar.newTab();
        actionBarTab.setText(R.string.actionbar_buildsystem).setTabListener(this);
        actionBar.addTab(actionBarTab);
        actionBarTab = actionBar.newTab();
        actionBarTab.setText(R.string.actionbar_fish).setTabListener(this);
        actionBar.addTab(actionBarTab);
        actionBarTab = actionBar.newTab();
        actionBarTab.setText(R.string.actionbar_plants).setTabListener(this);
        actionBar.addTab(actionBarTab);
        
        actionBar.setSelectedNavigationItem(2);
        
        
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// TODO Auto-generated method stub
        getMenuInflater().inflate(R.menu.main, menu);
        
 //       menu.findItem(R.id.action_about).s
        menu.findItem(R.id.action_item_one).setEnabled(false).setVisible(false);
        
//        menu.findItem(R.id.action_item_one).setIcon(R.drawable.ic_action_new);
        menu.findItem(R.id.action_item_two).setIcon(R.drawable.ic_action_about);
        
        return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onTabSelected(Tab tab, FragmentTransaction ft) {
		// TODO Auto-generated method stub
		int tabIndex = tab.getPosition();
		if (tabIndex == 0) {
			if (switched == true) {
				Intent buildIntent = new Intent(context, MainActivity.class);
				startActivity(buildIntent);
			}
		}
		if (tabIndex == 1) {
//			switched = true;
			if (switched == true) {
				Intent fishIntent = new Intent(context, FishActivity.class);
				startActivity(fishIntent);
			}
		}
		if (tabIndex == 2) {
			if (switched == false) {
				if (!plantsList.isEmpty()) {
					plantsList.removeAll(plantsList);
				}
				fileManager = FileManager.getInstance();
				fileName = getResources().getString(R.string.plants_file_name);
				checkForFile();
				Log.i(tag, "Plant tab hit!");
			}
			switched = true;
		}
	}

	@Override
	public void onTabUnselected(Tab tab, FragmentTransaction ft) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onTabReselected(Tab tab, FragmentTransaction ft) {
		// TODO Auto-generated method stub
		
	}
	
	public boolean checkForFile() {
		boolean fileAvailable = false;
    	
			Log.i(tag, "CheckForFile hit");
        	String fileContent = fileManager.readFromFile(context, null, getResources().openRawResource(R.raw.plants));
        	Log.i(tag, "File Check is Running");
        	if (!fileContent.isEmpty()) {
        		parseData(fileContent.toString());
        		fileAvailable = true;
        	}
        return fileAvailable;
	}

	// Get and Parse JSON Function... (fishData = Raw JSON code)
	public Boolean parseData(String plantData) {

		Log.i(tag, "parseData hit");
		Boolean completed = false;
		String jsonString = null;
		if (plantData != null) {
			jsonString = plantData;
		}

		// Parse JSON
		try {
			// Creating JSONObject from String
			JSONObject mainObject = new JSONObject(jsonString);
			JSONArray subObject = mainObject.getJSONArray("plants");

			for (int i = 0; i < subObject.length(); i ++) {
				JSONObject plantObject = subObject.getJSONObject(i);

				// Class Specific Data
				String plantName = plantObject.getString("name");
				String plantMinTemp = plantObject.getString("mintemp");
				String plantMaxTemp = plantObject.getString("maxtemp");
				String plantImage = plantObject.getString("image");
				String plantEdible = plantObject.getString("edible");
				Log.i(tag, plantName);
				Log.i(tag, plantMinTemp);
				Log.i(tag, plantMaxTemp);
				Log.i(tag, plantImage);
				Integer minTempInt = Integer.parseInt(plantMinTemp);
				Integer maxTempInt = Integer.parseInt(plantMaxTemp);

				// Save Data Here
				setClass(plantName, minTempInt, maxTempInt, plantImage, plantEdible);
			}
			completed = true;
		} 
		catch (JSONException e) {
			// TODO Auto-generated catch block
			Log.e(tag, e.getMessage().toString());
			Log.i(tag, "Something went wrong parsing plants");
			e.printStackTrace();
		}
		return completed;
	}

	// Save Parsed Data to Class
	public void setClass(String name, Integer minTemp, Integer maxTemp, String image, edible) {
		Log.i(tag, "setClass hit");
		Plants newPlant = new Plants(name, minTemp, maxTemp, image, edible);
			plantsList.add(newPlant);
	}

	@Override
	public ArrayList getData(int pos) {
		// TODO Auto-generated method stub
		ArrayList<String> item = new ArrayList<String>();
		item.add(plantsList.get(pos).name);
		item.add(plantsList.get(pos).minTemp.toString());
		item.add(plantsList.get(pos).maxTemp.toString());
		item.add(plantsList.get(pos).image);
		item.add(plantsList.get(pos).edible);
		
		Log.i(tag, item.toString());
		return item;
	}
}
